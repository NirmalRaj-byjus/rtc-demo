{"version":3,"sources":["reportWebVitals.js","Components/RemoteStream.js","Rtm.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RemoteStream","props","id","stream","onAVChange","isTute","tuteControls","audioState","videoState","className","fontSize","onClick","video","audio","Rtm","initRTM","RTMClient","AgoraRTM","createInstance","appId","subscribeClientEvents","getChannelCount","getChannelMemberCount","channel","res","console","log","catch","error","loginToRTM","a","state","uid","alert","login","token","RTMChannel","createChannel","setState","rtmLoggedIn","getAVStates","getChannelAttributes","attr","av","JSON","parse","value","checkForInitialMute","ctrl","tuteAVControls","muteUser","joinSessionChannel","join","joinChannel","rtmChannelJoined","subscribeChannelEvents","on","message","memberId","attributes","event","peerId","data","text","type","localAudio","audioTrack","setEnabled","localVideo","videoTrack","initLocalStream","AgoraRTC","createMicrophoneAndCameraTracks","play","localVideoView","current","onDeviceChange","onMicrophoneChanged","onCameraChanged","info","device","getDevices","devices","audioDevices","filter","kind","length","createMicrophoneAudioTrack","deviceId","newAudioDevice","audioPublished","RTCClient","unpublish","publishTrack","track","publish","trackMediaType","videoPublished","unpublishTrack","initClient","createClient","mode","codec","subscribeEvents","userPublished","userUnPublished","userLeft","userJoined","user","reason","remoteStreams","mediaType","subscribe","setRemoteVideoStreamType","setStreamFallbackOption","unsubscribe","rtm","params","enableDualStream","err","toggleTrack","addOrUpdateChannelAttributes","stringify","sendMessageToPeer","toString","result","hasPeerReceived","getChannelAttr","localStreamInitiated","React","createRef","this","onChange","e","target","placeholder","ref","Object","keys","map","item","index","Component","ReactDOM","render","StrictMode","style","display","document","getElementById"],"mappings":"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","file":"static/js/main.a16ea277.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\nimport MicIcon from '@material-ui/icons/Mic';\nimport MicOffIcon from '@material-ui/icons/MicOff';\n\nconst RemoteStream = (props) => {\n  const { id, stream, onAVChange, isTute = false, tuteControls = {} } = props;\n  const { audioState, videoState } = stream;\n\n  return (\n    <div className=\"remoteStreamItem\">\n      <div className=\"remoteStream\" id={id}></div>\n      <div className=\"controls\">\n        <div className=\"controlIcon\" >{videoState ? <VideocamIcon fontSize=\"small\" /> : <VideocamOffIcon fontSize=\"small\" />}</div>\n        <div className=\"controlIcon\" >{audioState ? <MicIcon fontSize=\"small\" /> : <MicOffIcon fontSize=\"small\" />}</div>\n      </div>\n      {isTute && <div className=\"controls\">\n        <button className=\"controlIcon\" onClick={() => onAVChange(id, 'video', tuteControls.video)} >{tuteControls.video ? \"Video on\" : \"Video off\"}</button>\n        <button className=\"controlIcon\" onClick={() => onAVChange(id, 'audio', tuteControls.audio)}>{tuteControls.audio ? \"Audio on\" : \"Audio off\"}</button>\n      </div>}\n    </div>\n  );\n};\n\nexport default RemoteStream;","import React from 'react';\nimport AgoraRTC from 'agora-rtc-sdk-ng';\nimport './App.css';\nimport RemoteStream from './Components/RemoteStream';\n\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\nimport MicIcon from '@material-ui/icons/Mic';\nimport MicOffIcon from '@material-ui/icons/MicOff';\nimport AgoraRTM from 'agora-rtm-sdk';\n\n\n\nclass Rtm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      localStreamInitiated: false,\n      remoteStreams: {},\n      localVideo: true,\n      localAudio: true,\n      videoPublished: false,\n      audioPublished: false,\n      rtmLoggedIn: false,\n      rtmChannelJoined: false,\n      uid: \"\",\n      tuteAVControls: {\n        audio: true,\n        video: true\n      },\n      isTute: false,\n\n      tuteControls: {\n\n      }\n\n    }\n\n\n    this.videoTrack = null\n    this.audioTrack = null;\n    this.RTMChannel = null;\n    this.RTCClient = null;\n    this.RTMClient = null;\n\n    this.channel = \"demo_channel_name\";\n    this.localVideoView = React.createRef();\n    this.appId = \"b8f5d7b5efcc4ba8992ac09d46a591b1\";\n\n\n    this.rtm = {\n      params: {\n      }\n    }\n  }\n\n\n\n\n  componentDidMount() {\n    this.initRTM();\n    this.initLocalStream();\n    this.onDeviceChange();\n    this.initClient();\n  }\n\n  initRTM = () => {\n    this.RTMClient = AgoraRTM.createInstance(this.appId);\n    this.subscribeClientEvents();\n  }\n\n\n  getChannelCount = () => {\n    this.RTMClient.getChannelMemberCount([this.channel]).then(res => {\n      console.log(\" =>> getChannelMemberCount\", res);\n    }).catch(error => {\n      console.log(\" =>> failed to get getChannelMemberCount\", error)\n    })\n\n    // this.RTMChannel.getMembers().then(res => {\n    //   console.log(\" =>> member count\", res);\n    // }).catch(error => {\n    //   console.log(\" =>> failed to get member count\", error)\n    // })\n  }\n\n  // getUserAttr = () => {\n  //   this.RTMClient.getUserAttributes(\"kj123\").then(res => {\n  //     console.log(\" =>> user Attr \", res);\n  //   }).catch(error => {\n  //     console.log(\" =>> failed to get user Attr\", error)\n  //   })\n  // }\n\n  // disableMe = () => {\n  //   this.RTMClient.setLocalUserAttributes({ \"videoState\": \"off\" }).then(res => {\n  //     console.log(\" =>> set user Attr done\", res);\n  //   }).catch(error => {\n  //     console.log(\" =>> failed to set user Attr\", error)\n  //   })\n  // }\n\n\n\n  loginToRTM = async () => {\n    if (this.state.uid === \"\") {\n      alert(\"please enter username\");\n      return;\n    }\n    this.RTMClient.login({ uid: this.state.uid, token: null }).then((res) => {\n      console.log(\" =>> RTM Loggin successfull!\");\n      this.RTMChannel = this.RTMClient.createChannel(this.channel);\n\n      this.setState({ rtmLoggedIn: true, isTute: this.state.uid === 'admin' });\n      this.getAVStates();\n    }).catch(error => {\n      console.log(\" =>> failed to login RTM\", error)\n    })\n  }\n\n  getAVStates = () => {\n    this.RTMClient.getChannelAttributes(this.channel).then(attr => {\n      console.log(\"=>> channel attrs\", attr)\n      let tuteControls = attr.av ? JSON.parse(attr.av.value) : {};\n      console.log(\"=>> controls tute\", tuteControls);\n      this.checkForInitialMute(tuteControls);\n      this.setState({ tuteControls });\n    }).catch(error => {\n      console.log(\"failed to get channel attrs\", error);\n    })\n  }\n\n  checkForInitialMute = (tuteControls) => {\n    let ctrl = tuteControls[this.state.uid] || null;\n    let tuteAVControls = { ...this.state.tuteAVControls }\n    if (ctrl) {\n      console.log(\"attr \", ctrl, !tuteAVControls.audio, !tuteAVControls.video);\n      if (!ctrl.audio) {\n        this.muteUser('audio')\n        tuteAVControls.audio = false;\n      }\n      if (!ctrl.video) {\n        this.muteUser('video')\n        tuteAVControls.video = false;\n      }\n      this.setState({ tuteAVControls })\n    }\n  }\n\n  joinSessionChannel = async () => {\n\n    this.RTMChannel.join().then(res => {\n      console.log(\" =>> Channel joined successfull!\", res);\n      this.joinChannel();\n      this.setState({ rtmChannelJoined: true })\n\n    }).catch(error => {\n      console.log(\" =>> Error joining channel\", error);\n    })\n  }\n\n  subscribeChannelEvents = () => {\n    this.RTMChannel.on('ChannelMessage', (message, memberId) => {\n      console.log(\"ChannelMessage =>>\", message, memberId)\n    })\n    this.RTMChannel.on('MemberJoined', (memberId) => {\n      console.log(\"MemberJoined =>>\", memberId)\n    })\n    this.RTMChannel.on('MemberLeft', memberId => {\n      console.log(\"MemberLeft =>>\", memberId)\n    });\n\n    this.RTMChannel.on('AttributesUpdated', attributes => {\n      console.log(\"AttributesUpdated =>>\", attributes);\n    })\n\n  }\n\n\n\n  subscribeClientEvents = () => {\n    this.RTMClient.on('ConnectionStateChanged', (event) => {\n      console.log(\"ConnectionStateChanged =>>\", event)\n    })\n    this.RTMClient.on('MessageFromPeer', (message, peerId) => {\n      console.log(\"MessageFromPeer =>>\", message, peerId)\n      let data = JSON.parse(message.text);\n      console.log(\"=>> msg\", data);\n      if (data.value === false) {\n        this.muteUser(data.type);\n      }\n      let tuteAVControls = { ...this.state.tuteAVControls };\n      tuteAVControls[data.type] = data.value;\n      this.setState({ tuteAVControls })\n\n    })\n  }\n\n  muteUser = (type) => {\n    if (type === 'audio') {\n      if (this.state.localAudio) {\n        this.audioTrack.setEnabled(false);\n        this.setState({ localAudio: false });\n      }\n    } else if (type === 'video') {\n      if (this.state.localVideo) {\n        this.videoTrack.setEnabled(false);\n        this.setState({ localVideo: false });\n      }\n    }\n  }\n\n  initLocalStream = async () => {\n    try {\n      [this.audioTrack, this.videoTrack] = await AgoraRTC.createMicrophoneAndCameraTracks();\n\n      // this.videoTrack.setOptimizationMode(\"motion\");\n      this.videoTrack.play(this.localVideoView.current);\n    } catch (error) {\n      alert(\"please check the permission for audio/camera\")\n      console.log(\"Weeoe\", error)\n    }\n  }\n\n  onDeviceChange = () => {\n    AgoraRTC.onMicrophoneChanged = this.onMicrophoneChanged;\n    // AgoraRTC.onCameraChanged = this.onPlaybackDeviceChange;\n  }\n\n  onCameraChanged = (info) => {\n    console.log(\"camera changed!\", info.state, info.device);\n  }\n\n\n  onMicrophoneChanged = async (info) => {\n    console.log(\"LLL  newdevice\", info);\n    try {\n      AgoraRTC.getDevices()\n        .then(async devices => {\n          const audioDevices = devices.filter(function (device) {\n            return device.kind === \"audioinput\";\n          });\n          console.log(audioDevices);\n          if (audioDevices.length > 0) {\n            let newAudioDevice = await AgoraRTC.createMicrophoneAudioTrack(audioDevices[0].deviceId);\n            if (this.state.audioPublished) {\n              await this.RTCClient.unpublish(this.audioTrack);\n              if (this.state.localAudio) {\n                this.publishTrack(newAudioDevice);\n              } else {\n                this.setState({ audioPublished: false });\n              }\n            }\n            this.audioTrack = newAudioDevice;\n\n          }\n        })\n    } catch (error) {\n      console.log(\"Error on get device,\", error);\n    }\n  }\n\n\n  publishTrack = (track) => {\n    this.RTCClient.publish(track).then(res => {\n      if (track.trackMediaType === 'audio') {\n        this.setState({ audioPublished: true })\n      } else if (track.trackMediaType === 'video') {\n        this.setState({ videoPublished: true })\n      }\n    }).catch(error => {\n      console.log(\"Failed to published track :\" + track.trackMediaType, track.trackMediaType, error);\n    })\n  }\n\n  unpublishTrack = async (track) => {\n    this.RTCClient.unpublish(track).then(() => {\n      console.log(\"unpublishTrack =>> :track unpublished\", track);\n    }).catch(error => {\n      console.log(\"unpublishTrack =>> : failed to unpublish track\", error);\n    })\n  }\n\n\n  initClient = () => {\n    this.RTCClient = AgoraRTC.createClient({\n      mode: 'rtc',\n      codec: 'vp8'\n    })\n    this.subscribeEvents();\n  }\n\n  subscribeEvents = () => {\n    this.RTCClient.on('user-published', this.userPublished);\n    this.RTCClient.on('user-unpublished', this.userUnPublished);\n    this.RTCClient.on('user-left', this.userLeft);\n    this.RTCClient.on('user-joined', this.userJoined);\n  }\n\n  userLeft = (user, reason) => {\n    console.log(\"userLeft Reason\", reason);\n    let remoteStreams = { ...this.state.remoteStreams };\n    delete remoteStreams[user.uid];\n    this.setState({ remoteStreams });\n  }\n\n  userJoined = (user) => {\n    let remoteStreams = { ...this.state.remoteStreams };\n    remoteStreams[user.uid] = {\n      uid: user.uid,\n      videoState: false,\n      audioState: false\n    };\n    this.setState({\n      remoteStreams\n    })\n  }\n\n  userPublished = async (user, mediaType) => {\n    console.log(\"LLLLL pub =>>>> \", mediaType);\n    await this.RTCClient.subscribe(user, mediaType);\n    await this.RTCClient.setRemoteVideoStreamType(user.uid, 0)\n    await this.RTCClient.setStreamFallbackOption(user.uid, 2)\n    let remoteStreams = { ...this.state.remoteStreams };\n    let uid = user.uid;\n    if (mediaType === \"video\") {\n      user.videoTrack.play(uid + \"\");\n      remoteStreams[uid].videoState = true;\n    }\n    else if (mediaType === \"audio\") {\n      user.audioTrack.play();\n      remoteStreams[uid].audioState = true;\n    }\n    this.setState({ remoteStreams });\n\n  }\n\n  userUnPublished = async (user, mediaType) => {\n    console.log(\"LLLLL unpub =>>>> \", mediaType);\n    await this.RTCClient.unsubscribe(user, mediaType);\n    let uid = user.uid;\n    let remoteStreams = { ...this.state.remoteStreams };\n    if (remoteStreams[uid]) {\n      if (mediaType === \"video\") {\n        remoteStreams[uid].videoState = false;\n      }\n      else if (mediaType === \"audio\") {\n        remoteStreams[uid].audioState = false;\n      }\n      this.setState({ remoteStreams });\n    }\n  }\n\n  joinChannel = () => {\n    if (this.RTCClient !== null) {\n      this.RTCClient.join(this.appId, this.channel, null, this.state.uid).then(uid => {\n        this.rtm.params.uid = uid;\n\n        this.RTCClient.enableDualStream().then(() => {\n          console.log(\"Enable Dual stream success!\");\n        }).catch(err => {\n          console.log(err);\n        })\n\n        if (this.state.localVideo) {\n          this.publishTrack(this.videoTrack);\n        }\n        if (this.state.localAudio) {\n          this.publishTrack(this.audioTrack);\n        }\n      }).catch(error => {\n        console.log(\"failed to join channel \", error);\n      })\n    }\n  }\n\n  toggleTrack = async (track) => {\n\n\n    if (track === 'video' && this.state.tuteAVControls.video) {\n      if (this.state.localVideo) {\n        await this.videoTrack.setEnabled(false);\n      } else {\n        await this.videoTrack.setEnabled(true);\n\n        if (!this.state.videoPublished) {\n          this.publishTrack(this.videoTrack);\n        }\n      }\n      this.setState({ localVideo: !this.state.localVideo })\n\n    } else if (track === 'audio' && this.state.tuteAVControls.audio) {\n      if (this.state.localAudio) {\n        await this.audioTrack.setEnabled(false);\n      } else {\n        await this.audioTrack.setEnabled(true);\n        if (!this.state.audioPublished) {\n          this.publishTrack(this.audioTrack);\n        }\n\n      }\n      this.setState({ localAudio: !this.state.localAudio });\n    }\n\n  }\n  onAVChange = (id, type, value) => {\n    let tuteControls = { ...this.state.tuteControls }\n    let ctrl = tuteControls[id] ? { ...tuteControls[id] } : {};\n    ctrl[type] = !value;\n    tuteControls[id] = ctrl;\n\n    this.RTMClient.addOrUpdateChannelAttributes(this.channel, { 'av': JSON.stringify(tuteControls) }).then(res => {\n      console.log(\"AV updated successfully!\");\n      let text = JSON.stringify({ type, value: !value });\n      this.RTMClient.sendMessageToPeer(\n        { text }, id.toString())\n        .then(result => {\n          console.log(\"sendResult =>>\", result);\n          if (result.hasPeerReceived) {\n            this.setState({ tuteControls });\n          }\n        }).catch(error => {\n          console.log(\"failed to send peer meg\", error);\n        })\n    })\n  }\n\n  getChannelAttr = () => {\n    this.RTMClient.getChannelAttributes(this.channel).then(attr => {\n      console.log(\"=>> channel attrs\", attr)\n    }).catch(error => {\n      console.log(\"failed to get channel attrs\", error);\n    })\n  }\n\n  render() {\n    const { remoteStreams, rtmLoggedIn, rtmChannelJoined, tuteControls } = this.state;\n    console.log(\"streams =>>\", remoteStreams);\n    return (\n      <div className=\"App\">\n        <div className=\"localStreamContainer\">\n          <input className=\"input\" value={this.state.uid} onChange={(e) => this.setState({ uid: e.target.value })} placeholder=\"enter user name\" />\n          <div id=\"localView\" ref={this.localVideoView}></div>\n          <div className=\"controls\">\n            <div className=\"controlIcon\" onClick={() => this.toggleTrack(\"video\")}>{this.state.localVideo ? <VideocamIcon fontSize=\"large\" /> : <VideocamOffIcon fontSize=\"large\" />}</div>\n            <div className=\"controlIcon\" onClick={() => this.toggleTrack(\"audio\")}>{this.state.localAudio ? <MicIcon fontSize=\"large\" /> : <MicOffIcon fontSize=\"large\" />}</div>\n          </div>\n          {!rtmLoggedIn && <button className=\"join\" onClick={this.loginToRTM}>Login RTM</button>}\n          {rtmLoggedIn && !rtmChannelJoined && <button className=\"join\" onClick={this.joinSessionChannel}>Join Channel</button>}\n          <button className=\"join\" onClick={this.getChannelCount}>Member count</button>\n          {/* <button className=\"join\" onClick={this.getUserAttr}>Get user Attr</button> */}\n          {/* <button className=\"join\" onClick={this.disableMe}>mark me as disabled</button> */}\n          <button className=\"join\" onClick={this.getChannelAttr}>Get channel attr</button>\n        </div>\n        <div className=\"remoteStreamContainer\">\n          {Object.keys(remoteStreams).map((item, index) => <RemoteStream key={item} isTute={this.state.isTute} onAVChange={this.onAVChange} tuteControls={tuteControls[item]} stream={remoteStreams[item]} id={item} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Rtm;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import App4 from './App4.1';\nimport Rtm from './Rtm';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{ display: 'flex' }}>\n      <Rtm />\n    </div>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}